apply from: file("${rootDir}/gradle/publish.gradle")

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadow_jar_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_gradle_version"
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openapi_generator_version"
    }
}

allprojects {
    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/foodtruckinc/Wonder/_packaging/maven-local/maven/v1'
            credentials {
                username "Azure DevOps Services"
                // The Azure DevOps Services build system will use the "SYSTEM_ACCESSTOKEN" to authenticate to Azure DevOps Services feeds
                password System.getenv("SYSTEM_ACCESSTOKEN")
            }
        }
        maven {
            url 'https://neowu.github.io/maven-repo/'
            content {
                includeGroup 'core.framework'
            }
        }
        mavenCentral()
    }
}

apply plugin: "org.jlleitschuh.gradle.ktlint-idea"

// All Kotlin modules
configure([":book:book-manager-service",
           ":book:book-manager-service-interface",
           ":book:book-manager-service-db-migration",
           ":book:book-search-service",
           ":book:book-search-service-interface"]) {
    apply plugin: "java"
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'kotlin-kapt'
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    configurations {
        all {
            resolutionStrategy {
                // fail eagerly on version conflict (includes transitive dependencies)
                // e.g. multiple different versions of the same dependency (group and name are equal)
                failOnVersionConflict()

                // prefer modules that are part of this build (multi-project or composite build) over external modules
                preferProjectModules()
            }
        }
    }

    configurations {
        ktlint
    }

    dependencies {
        kapt group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$logging_version"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"

        implementation "com.wonder:core:$kore_version"
        implementation "com.wonder:api:$kore_version"

        // Testing
        testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter"
        testImplementation "net.javacrumbs.json-unit:json-unit:$jsonunit_version"
        testImplementation "io.mockk:mockk:$mockk_version"

        // TODO: only services that use SQL need this
        runtimeOnly "mysql:mysql-connector-java:$mysql_version"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = '1.8'
            freeCompilerArgs = ["-Xallow-result-return-type"]
        }
    }

    test {
        useJUnitPlatform()
        maxHeapSize = '1G'
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    ktlint {
        additionalEditorconfigFile = file(".editorconfig")
        disabledRules = ["no-wildcard-imports",
                         "no-unused-imports",
                         "comment-spacing"]
        verbose = true
        filter {
            exclude("**/build/**")
        }
    }
}

configure(subprojects.findAll { it.name.endsWith('-db-migration') }) {
    apply from: file("${rootDir}/gradle/db-migration.gradle")
    apply plugin: 'java'

    dependencies {
        runtimeOnly "mysql:mysql-connector-java:$mysql_version"
    }
}
